version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0
  aws-cli: circleci/aws-cli@5.1.2
  aws-s3: circleci/aws-s3@4.1.0

parameters:
  DEFAULT_WORKSPACE_DIRECTORY:
    type: string
    default: "/tmp/workspace"
  GIT_LATEST_COMMIT_SHA_KEY:
    type: string
    default: "last_commit_sha"

executors:
  test-executor:
    docker:
      - image: cimg/openjdk:17.0.13-node

jobs:
  test-and-build:
    executor: test-executor
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker: # Enable Docker for Testcontainers
          version: default
      - gradle/with_cache:
          steps:
            - run:
                command: gradle clean build
      - persist_to_workspace:
          root: build/libs/
          paths:
            - redis-implementation-1.0.0.jar

  upload:
    executor: aws-s3/default
    steps:
      - attach_workspace:
          at: << pipeline.parameters.DEFAULT_WORKSPACE_DIRECTORY >>
      - aws-s3/copy:
          from: << pipeline.parameters.DEFAULT_WORKSPACE_DIRECTORY >>/redis-implementation-1.0.0.jar
          to: s3://myoptions-v2/project/redis-implementation/build/redis-implementation-1.0.0.jar

  deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - run:
          name: Record the latest commit id in CircleCI's env file
          command: echo "export << pipeline.parameters.GIT_LATEST_COMMIT_SHA_KEY >>=$(git rev-parse HEAD)" >> $BASH_ENV
      - aws-cli/setup:
          profile_name: default
      - run:
          command: |
            aws deploy create-deployment \
            --application-name redis-impl \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name redis-impl-dg \
            --description "Deployed from CircleCI" \
            --ignore-application-stop-failures \
            --github-location repository=Carricaner/redis-implement,commitId=$<< pipeline.parameters.GIT_LATEST_COMMIT_SHA_KEY >> \
            | jq -r ".deploymentId"

workflows:
  test-build-deploy:
    jobs:
      - test-and-build:
          filters:
            branches:
              only:
                - dev
                - pro
                - main
      - upload:
          requires:
            - test-and-build
          filters:
            branches:
              only:
                - dev
                - prod
                - main
      - deploy:
          requires:
            - upload
          filters:
            branches:
              only:
                - dev
                - prod
                - main