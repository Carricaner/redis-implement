version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3

parameters:
  DEFAULT_WORKSPACE_DIR:
    type: string
    default: "/tmp/workspace"
  WORKSPACE_SHARE_SUBFOLDER_PATH:
    type: string
    default: "/share"
  WORKSPACE_AUTH_SUBFOLDER_PATH:
    type: string
    default: "/auth"
  SHARED_FILE_NAME:
    type: string
    default: "env.sh"

executors:
  my-executor:
    docker:
      - image: buildpack-deps:jessie
    working_directory: /work_dir

workflows:
  prod-deploy:
    jobs:
      - env-prep:
          context:
            - global-context
      - check-running-instances:
          filters:
            branches:
              only:
                - main
          requires:
            - env-prep
      - aws-code-deploy:
          context:
            - global-context
          filters:
            branches:
              only:
                - main
          requires:
            - env-prep

jobs:
  env-prep:
    docker:
      - image: cimg/base:2024.02
        user: root
    steps:
      - build-workspace
      - persist_to_workspace:
          root: << pipeline.parameters.DEFAULT_WORKSPACE_DIR >>
          paths:
            - auth
            - share
  check-running-instances:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: << pipeline.parameters.DEFAULT_WORKSPACE_DIR >>
      - aws-cli/setup:
          profile_name: default
      - run: |
          aws ec2 describe-instances \
          --filters "Name=tag:project,Values=perfect-counter" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output json | jq -r '.[]'

  aws-code-deploy:
    executor: aws-cli/default
    steps:
      # We need to set up the env vars of AWS_ACCESS_KEY_ID, AWS_DEFAULT_REGION &
      # AWS_SECRET_ACCESS_KEY in the Circle CI's project first.
      - attach_workspace:
          at: << pipeline.parameters.DEFAULT_WORKSPACE_DIR >>
      - aws-cli/setup:
          profile_name: default
      - run:
          name: Deploy through CodeDeploy
          command: |
            # need to source the file first, otherwise, it get nothing
            source << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< pipeline.parameters.WORKSPACE_SHARE_SUBFOLDER_PATH >>/<< pipeline.parameters.SHARED_FILE_NAME >>
            aws deploy create-deployment \
            --application-name perfect-counter \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name perfect-counter-dg \
            --description "Deployment from Circle CI" \
            --github-location repository=Carricaner/perfect-counter,commitId=${!GIT_LATEST_COMMIT_ID_KEY} | jq -r ".deploymentId"

commands:
  create-workspace-folder:
    description: Create a (sub)folder under the workspace path. If `dir` is not provided, it will create the root workspace dir.
    parameters:
      dir:
        type: string
        default: ""
    steps:
      - run: |
          if [ ! -d << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.dir >> ]; then
            mkdir -p << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.dir >>
            echo "<< pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.dir >> created!"
          fi
  create-workspace-file:
    description: Create a file under a (sub)folder workspace path.
    parameters:
      file:
        type: string
        default: ""
    steps:
      - run: |
          if [ ! -f << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >> ]; then
            touch << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >>
            echo "<< pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >> created!"
            if [[ << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >> == *".sh" ]]; then
              echo "#!/bin/bash" >> << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >>
              echo "#!/bin/bash is written into << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< parameters.file >>"
            fi
          fi
  build-workspace:
    steps:
      - create-workspace-folder:
          dir: ""
      - create-workspace-folder:
          dir: << pipeline.parameters.WORKSPACE_SHARE_SUBFOLDER_PATH >>
      - create-workspace-folder:
          dir: << pipeline.parameters.WORKSPACE_AUTH_SUBFOLDER_PATH >>
      - create-workspace-file:
          file: << pipeline.parameters.WORKSPACE_SHARE_SUBFOLDER_PATH >>/<< pipeline.parameters.SHARED_FILE_NAME >>
      - checkout
      - run:
          name: Record the latest git commit ID in the env file
          command: |
            echo "export $GIT_LATEST_COMMIT_ID_KEY=$(git rev-parse HEAD)" >> << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< pipeline.parameters.WORKSPACE_SHARE_SUBFOLDER_PATH >>/<< pipeline.parameters.SHARED_FILE_NAME >>
      - run:
          name: Print the env file content
          command: |
            cat << pipeline.parameters.DEFAULT_WORKSPACE_DIR >><< pipeline.parameters.WORKSPACE_SHARE_SUBFOLDER_PATH >>/<< pipeline.parameters.SHARED_FILE_NAME >>

  echo_something:
    description: Echo the input
    parameters:
      enabled:
        description: Run or not
        type: boolean
        default: true
      input:
        description: The input string
        type: string
        default: Nothing happened.
    steps:
      - when:
          condition: << parameters.enabled >>
          steps:
            - run: echo "<<parameters.input>>"
